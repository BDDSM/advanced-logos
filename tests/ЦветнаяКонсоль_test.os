#использовать "../src"
#Использовать asserts
#Использовать logos

Перем юТест;
Перем мСообщенияЛога;
Перем Лог;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;

	ИменаТестов = Новый Массив;

	ИменаТестов.Добавить("ТестДолжен_ПроверитьЦветнойВыводВКонсоль");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьВыводНаРусском");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьОтключениеЦветногоВывода");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьОтключениеПрефиксов");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьОтключениеВыводаДатыСобытия");
	
	ИменаТестов.Добавить("ТестДолжен_ПроверитьУстановкуФорматаДаты");

	Возврат ИменаТестов;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	Лог = Логирование.ПолучитьЛог("testing");

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Лог.УдалитьСпособВывода(ЭтотОбъект);
	Логирование.ЗакрытьЛог(Лог);
	Лог = Неопределено;
	мСообщенияЛога = Неопределено;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьЦветнойВыводВКонсоль() Экспорт

	ЦветнойВывод = Новый ЦветнойВыводЛогаКонсоль;
	Лог.ДобавитьСпособВывода(ЦветнойВывод);

	Лог.Поля("prefix", "connect", "длина", 200, "ширина", 100).Отладка("Это отладка");
	Лог.Информация("Тестовая информация");
	Лог.Поля("prefix", "sys").Предупреждение("Тестовая информация");
	Лог.Поля("prefix", "connect", "корова", 200, "адрес", "server.com").Ошибка("Тестовая информация");
	Лог.КритичнаяОшибка("Критичная информация");

	// Утверждения.ПроверитьРавенство(МеткаВремени, 1514764800, "Полученные числа должны быть равны");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыводНаРусском() Экспорт

	ЦветнойВывод = Новый ЦветнойВыводЛогаКонсоль;
	ЦветнойВывод.УровниСообщенияНаРусском();
	Лог.ДобавитьСпособВывода(ЦветнойВывод);

	Лог.Отладка("Вывод отладки");
	Лог.Информация("Вывод информации");
	Лог.Предупреждение("Вывод предупреждения");
	Лог.Ошибка("Вывод ошибки");
	Лог.КритичнаяОшибка("Вывод критичная ошибка");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтключениеЦветногоВывода() Экспорт

	ЦветнойВывод = Новый ЦветнойВыводЛогаКонсоль;
	ЦветнойВывод.ОтключитьЦвета();
	Лог.ДобавитьСпособВывода(ЦветнойВывод);

	Лог.Отладка("Вывод отладки");
	Лог.Информация("Вывод информации");
	Лог.Предупреждение("Вывод предупреждения");
	Лог.Ошибка("Вывод ошибки");
	Лог.КритичнаяОшибка("Вывод критичная ошибка");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтключениеПрефиксов() Экспорт
	
	ЦветнойВывод = Новый ЦветнойВыводЛогаКонсоль;
	ЦветнойВывод.ОтключитьПрефиксы();
	Лог.ДобавитьСпособВывода(ЦветнойВывод);

	Лог.Отладка("Вывод отладки");
	Лог.Информация("Вывод информации");
	Лог.Предупреждение("Вывод предупреждения");
	Лог.Ошибка("Вывод ошибки");
	Лог.КритичнаяОшибка("Вывод критичная ошибка");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтключениеВыводаДатыСобытия() Экспорт
	
	ЦветнойВывод = Новый ЦветнойВыводЛогаКонсоль;
	ЦветнойВывод.ОтключитьДатуСобытия();
	Лог.ДобавитьСпособВывода(ЦветнойВывод);

	Лог.Отладка("Вывод отладки");
	Лог.Информация("Вывод информации");
	Лог.Предупреждение("Вывод предупреждения");
	Лог.Ошибка("Вывод ошибки");
	Лог.КритичнаяОшибка("Вывод критичная ошибка");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуФорматаДаты() Экспорт
	
	ЦветнойВывод = Новый ЦветнойВыводЛогаКонсоль;
	ЦветнойВывод.УстановитьФорматДатыСобытия("yyyy/MM/dd hh:mm:ss");
	Лог.ДобавитьСпособВывода(ЦветнойВывод);

	Лог.Отладка("Вывод отладки");
	Лог.Информация("Вывод информации");
	Лог.Предупреждение("Вывод предупреждения");
	Лог.Ошибка("Вывод ошибки");
	Лог.КритичнаяОшибка("Вывод критичная ошибка");

КонецПроцедуры

Процедура ДобавитьСебяКакОбработчикаВывода(Знач Обработчик, Знач НовыйУровень = Неопределено)
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(Обработчик, НовыйУровень);
	Лог.ДобавитьСпособВывода(ЭтотОбъект, НовыйУровень);

КонецПроцедуры

// Выводит событие лога 
//
// Параметры:
//   СобытиеЛога - Объект - объект класса <СобытиеЛога>
//
Процедура ВывестиСобытие(Знач СобытиеЛога) Экспорт
	мСообщенияЛога.Добавить(СобытиеЛога);
КонецПроцедуры

Процедура Закрыть() Экспорт
	мСообщенияЛога = Неопределено;
КонецПроцедуры



